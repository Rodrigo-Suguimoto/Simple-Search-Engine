type: edu
files:
  - name: src/search/Main.java
    visible: true
    text: |
      package search;
      
      public class Main {
          public static void main(String[] args) {
              System.out.println("Hello World!");
          }
      }
    learner_created: false
  - name: test/SearchEngineTests.java
    visible: false
    text: |
      public class SearchEngineTests {
          public static final String NAMES = "Kristofer Galley\n" +
              "Fernando Marbury fernando_marbury@gmail.com\n" +
              "Kristyn Nix nix-kris@gmail.com\n" +
              "Regenia Enderle\n" +
              "Malena Gray\n" +
              "Colette Mattei\n" +
              "Wendolyn Mcphillips\n" +
              "Jim Gray\n" +
              "Coreen Beckham\n" +
              "Bob Yeh bobyeah@gmail.com\n" +
              "Shannan Bob stropeshah@gmail.com\n" +
              "Yer Fillion\n" +
              "Margene Resendez marres@gmail.com\n" +
              "Blossom Ambler\n" +
              "Teri Ledet teri_ledet@gmail.com\n" +
              "Dana Baron baron@gmail.com\n" +
              "Abram Goldsberry\n" +
              "Yer Leopold\n" +
              "Stefania Trunzo\n" +
              "Alexis Leopold\n" +
              "Carlene Bob\n" +
              "Oliver Dacruz\n" +
              "Jonie Richter\n" +
              "Pasquale Gallien gallien@evilcorp.com\n" +
              "Verdie Gentle\n" +
              "Gerardo Strouth gallien@evilcorp.com\n" +
              "Agripina Bob\n" +
              "Latricia Niebuhr\n" +
              "Malena Schommer\n" +
              "Drema Leopold\n" +
              "Heide Payeur\n" +
              "Ranae Digiovanni\n" +
              "Simona Pereira\n" +
              "Nick Digiovanni\n" +
              "Angelita Wigington gallien@evilcorp.com\n" +
              "Elin Gray\n" +
              "Dwain Trunzo\n" +
              "Boris Beiler\n" +
              "Remi Malek fsociefy@gmail.com\n" +
              "Demetria Hostetler gallien@evilcorp.com\n" +
              "Nydia Mcduffie\n" +
              "Florencio Defibaugh\n" +
              "Warner Giblin\n" +
              "Bob Mans\n" +
              "Shu Gray\n" +
              "Kaycee Gray\n" +
              "Victorina Froehlich victory@gmail.com\n" +
              "Roseanne Gray\n" +
              "Erica Radford hisam@gmail.com\n" +
              "Elyse Pauling";
      }
    learner_created: false
  - name: test/SimpleSearchEngineTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      
      import java.util.*;
      
      class TestClue {
          String input;
      
          TestClue(String input) {
              this.input = input;
          }
      }
      
      public class SimpleSearchEngineTest extends StageTest<TestClue> {
      
          @Override
          public List<TestCase<TestClue>> generate() {
              return Arrays.asList(
                  new TestCase<TestClue>().setAttach(
                      new TestClue("1\n" +
                      "ANY\n" +
                      "bob gallien@evilcorp.com\n" +
                      "2\n" +
                      "1\n" +
                      "NONE\n" +
                      "bob gallien@evilcorp.com\n" +
                      "0")).setInput("1\n" +
                      "ANY\n" +
                      "bob gallien@evilcorp.com\n" +
                      "2\n" +
                      "1\n" +
                      "NONE\n" +
                      "bob gallien@evilcorp.com\n" +
                      "0")
                      .addArguments("--data", "names.txt")
                      .addFile("names.txt", SearchEngineTests.NAMES),
      
      
                  new TestCase<TestClue>().setAttach(new TestClue("2\n" +
                      "1\n" +
                      "ALL\n" +
                      "this text never gonna be matched\n" +
                      "2\n" +
                      "0")).setInput("2\n" +
                      "1\n" +
                      "ALL\n" +
                      "this text never gonna be matched\n" +
                      "2\n" +
                      "0")
                      .addArguments("--data", "names.txt")
                      .addFile("names.txt", SearchEngineTests.NAMES)
              );
          }
      
          @Override
          public CheckResult check(String reply, TestClue clue) {
              String cR = "\n";
              List<String> outputLines = new LinkedList<String>(Arrays.asList(reply.split(cR)));
              String[] inputLines = clue.input.split(cR);
              String[] reference;
      
              reference = SearchEngineTests.NAMES.split("\n");
      
              //clear the list of unnecessary lines, if any
              List<String> cleanedOutput = new ArrayList<String>();
              for (int i = 0; i < outputLines.size(); i++) {
                  if (containsItemFromList(outputLines.get(i), reference)) {
                      cleanedOutput.add(outputLines.get(i).toLowerCase());
                  }
              }
      
              int currentInputLine = 0;
              int currentOutputLine = 0;
      
              int actionType = -1;
      
              while (actionType != 0) {
                  try {
                      actionType = Integer.parseInt(inputLines[currentInputLine]);
                  } catch (NumberFormatException e) {
                      return new CheckResult(false,
                          "The number of menu item must be number!");
                  }
      
                  switch (actionType) {
                      case 1:
                          currentInputLine++;
      
                          List<Integer> result = new ArrayList<>();
      
                          List<String> intendedResult = new ArrayList<>();
      
                          while (true) {
                              String mode = inputLines[currentInputLine].trim().toLowerCase();
                              currentInputLine++;
      
                              String toSearch = "";
      
                              if (mode.equalsIgnoreCase("all")) {
                                  toSearch = inputLines[currentInputLine].trim().toLowerCase();
                                  currentInputLine++;
                                  String[] allChecks = toSearch.split(" ");
      
                                  for (String s : reference) {
                                      s = s.toLowerCase();
      
                                      boolean isPassedChecks = true;
      
                                      for (String currCheck : allChecks) {
                                          if (!(s.contains(" " + currCheck + " ")
                                              || s.startsWith(currCheck + " ")
                                              || s.endsWith(" " + currCheck))) {
      
                                              isPassedChecks = false;
                                              break;
                                          }
                                      }
      
                                      if (isPassedChecks) {
                                          intendedResult.add(s);
                                      }
                                  }
                                  break;
                              } else if (mode.equalsIgnoreCase("any")) {
                                  toSearch = inputLines[currentInputLine].trim().toLowerCase();
                                  currentInputLine++;
                                  String[] allChecks = toSearch.split(" ");
      
                                  for (String s : reference) {
                                      s = s.toLowerCase();
      
                                      boolean isPassedChecks = false;
      
                                      for (String currCheck : allChecks) {
                                          if (s.contains(" " + currCheck + " ")
                                              || s.startsWith(currCheck + " ")
                                              || s.endsWith(" " + currCheck)) {
      
                                              isPassedChecks = true;
                                              break;
                                          }
                                      }
      
                                      if (isPassedChecks) {
                                          intendedResult.add(s);
                                      }
                                  }
                                  break;
                              } else if (mode.equalsIgnoreCase("none")) {
                                  toSearch = inputLines[currentInputLine].trim().toLowerCase();
                                  currentInputLine++;
                                  String[] allChecks = toSearch.split(" ");
      
                                  for (String s : reference) {
                                      s = s.toLowerCase();
      
                                      boolean isPassedChecks = true;
      
                                      for (String currCheck : allChecks) {
                                          if (s.contains(" " + currCheck + " ")
                                              || s.startsWith(currCheck + " ")
                                              || s.endsWith(" " + currCheck)) {
      
                                              isPassedChecks = false;
                                              break;
                                          }
                                      }
      
                                      if (isPassedChecks) {
                                          intendedResult.add(s);
                                      }
                                  }
                                  break;
                              }
                          }
      
                          String[] userResult = new String[intendedResult.size()];
                          for (int i = 0; i < intendedResult.size(); i++) {
                              try {
                                  userResult[i] = cleanedOutput.get(currentOutputLine++);
                              } catch (IndexOutOfBoundsException e) {
                                  return new CheckResult(false,
                                      "Seems like you output less than expected. " +
                                          "Either you've lost someone in the printing of all " +
                                          "people, or you haven't printed all the necessary " +
                                          "people in the search.");
                              }
                          }
      
                          String[] correctOutput = intendedResult.toArray(String[]::new);
      
                          Arrays.sort(correctOutput);
                          Arrays.sort(userResult);
      
                          if (!Arrays.equals(correctOutput, userResult)) {
                              return new CheckResult(false,
                                  "Search result is not equal " +
                                      "to the expected search");
                          }
                          break;
                      case 2:
                          currentInputLine++;
      
                          List<String> intendedResultAll = new ArrayList<>();
      
                          for (String s : reference) {
                              s = s.toLowerCase();
                              intendedResultAll.add(s);
                          }
      
                          String[] userResultAll = new String[intendedResultAll.size()];
                          for (int i = 0; i < intendedResultAll.size(); i++) {
                              try {
                                  userResultAll[i] = cleanedOutput.get(currentOutputLine++);
                              } catch (IndexOutOfBoundsException e) {
                                  return new CheckResult(false,
                                      "Seems like you output less than expected. " +
                                          "Either you've lost someone in the printing of all " +
                                          "people, or you haven't printed all the necessary " +
                                          "people in the search.");
                              }
                          }
      
                          String[] correctOutputAll = intendedResultAll.toArray(String[]::new);
      
                          Arrays.sort(correctOutputAll);
                          Arrays.sort(userResultAll);
      
                          if (!Arrays.equals(correctOutputAll, userResultAll)) {
                              return new CheckResult(false,
                                  "Looks like you're printing " +
                                      "unknown people when you enter option 2.");
                          }
                          break;
                      case 0:
                          return CheckResult.correct();
                      default:
                          currentInputLine++;
                          break;
                  }
              }
      
              return CheckResult.correct();
          }
      
          private static boolean containsItemFromList(String inputStr, String[] items) {
              return Arrays.stream(items).parallel().anyMatch(inputStr::contains);
          }
      }
    learner_created: false
  - name: src/search/Dataset.java
    visible: true
    text: |
      package search;
      
      import java.io.File;
      import java.io.FileNotFoundException;
      import java.util.*;
      import java.util.regex.Matcher;
      import java.util.regex.Pattern;
      
      public class Dataset {
      
          private Map<String, List<Integer>> invertedIndex = new HashMap<>();
          private ArrayList<String> dataset = new ArrayList<>();
      
          public void setDataset(String fileName) {
              String pathToFile = String.format("./%s", fileName);
      
              File file = new File(pathToFile);
      
              try {
                  Scanner scanner = new Scanner(file);
                  while(scanner.hasNext()) {
                      this.dataset.add(scanner.nextLine());
                  }
      
                  transformToInvertedIndex();
              } catch (FileNotFoundException e) {
                  System.out.println("No file found on " + pathToFile);
              }
          }
      
          private void transformToInvertedIndex() {
              for (int i = 0; i < this.dataset.size(); i++) {
                  addToInvertedIndex(this.dataset.get(i), i);
              }
          }
      
          private void addToInvertedIndex(String lineContent, int lineNumber) {
              String[] words = lineContent.toLowerCase().split(" ");
      
              for (String word : words) {
                  if (!this.invertedIndex.containsKey(word)) {
                      this.invertedIndex.put(word, new ArrayList<>()); // Since it's a new word, create a new list for line numbers
                  }
                  this.invertedIndex.get(word).add(lineNumber); // Add line number to the word's list
              }
          }
      
          public void search() {
              Scanner scanner = new Scanner(System.in);
              System.out.println(); // Print an empty line.
              System.out.println("Enter a name or email to search all suitable people.");
              String query = scanner.nextLine();
              List<Integer> linesWithContent = this.invertedIndex.getOrDefault(query.toLowerCase(), Collections.emptyList());
              for (int line : linesWithContent) {
                  System.out.println(this.dataset.get(line));
              }
      
          }
      
          public void printDataset() {
              System.out.println(); // Print an empty line.
              System.out.println("=== List of people ===");
              this.dataset.forEach((entry) -> System.out.println(entry));
          }
      }
    learner_created: true
  - name: src/search/Main.class
    visible: true
    is_binary: true
    learner_created: true
  - name: src/search/Dataset.class
    visible: true
    is_binary: true
    learner_created: true
  - name: src/search/Menu.class
    visible: true
    is_binary: true
    learner_created: true
  - name: src/data.txt
    visible: true
    text: |-
      Dwight Joseph djo@gmail.com
      Rene Webb webb@gmail.com
      Katie Jacobs
      Erick Harrington harrington@gmail.com
      Myrtle Medina
      Erick Burgess
    learner_created: true
  - name: src/search/Menu.java
    visible: true
    text: |
      package search;
      
      import java.util.Scanner;
      
      public class Menu {
          int option;
      
          public void printOptions() {
              System.out.println(); // Print an empty line.
              System.out.println("=== Menu ===");
              System.out.println("1. Find a person");
              System.out.println("2. Print all people");
              System.out.println("0. Exit");
          }
      
          public Integer getSelectedOptionFromUser() {
              Scanner scanner = new Scanner(System.in);
              int option = scanner.nextInt();
      
              if (option > 2 || option < 0) {
                  System.out.println(); // Print an empty line.
                  System.out.println("Incorrect option! Try again.");
                  return null;
              } else {
                  return option;
              }
          }
      }
    learner_created: true
  - name: src/search/Search.java
    visible: true
    learner_created: true
  - name: src/search/SearchMethod.java
    visible: true
    learner_created: true
  - name: src/search/Search.class
    visible: true
    is_binary: true
    learner_created: true
  - name: src/search/SearchAllStrategy.class
    visible: true
    is_binary: true
    learner_created: true
  - name: src/search/SearchMethod.class
    visible: true
    is_binary: true
    learner_created: true
  - name: src/search/SearchAnyStrategy.class
    visible: true
    is_binary: true
    learner_created: true
  - name: src/search/SearchNoneStrategy.class
    visible: true
    is_binary: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/5501#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Fri, 29 Nov 2024 10:51:45 UTC"
record: 6
